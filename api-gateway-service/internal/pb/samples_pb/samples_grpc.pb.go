// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api/proto/samples/samples.proto

package samples_pb

import (
	pb "api-gateway-service/internal/pb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SamplesServiceClient is the client API for SamplesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SamplesServiceClient interface {
	UploadSample(ctx context.Context, opts ...grpc.CallOption) (SamplesService_UploadSampleClient, error)
	GetSampleData(ctx context.Context, in *GetSampleRequest, opts ...grpc.CallOption) (*GetSampleDataResponse, error)
	GetSampleFile(ctx context.Context, in *GetSampleRequest, opts ...grpc.CallOption) (SamplesService_GetSampleFileClient, error)
	GetSamples(ctx context.Context, in *GetSamplesRequest, opts ...grpc.CallOption) (*GetSamplesResponse, error)
	GetSamplesByNamePrefix(ctx context.Context, in *GetSamplesByNamePrefixRequest, opts ...grpc.CallOption) (*GetSamplesResponse, error)
	EditSampleInfo(ctx context.Context, in *SampleData, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
	DeleteSample(ctx context.Context, in *SampleIdRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
	GetUserSamples(ctx context.Context, in *GetUserSamplesRequest, opts ...grpc.CallOption) (*GetSamplesResponse, error)
	UploadCover(ctx context.Context, opts ...grpc.CallOption) (SamplesService_UploadCoverClient, error)
	GetCoverById(ctx context.Context, in *CoverIdRequest, opts ...grpc.CallOption) (SamplesService_GetCoverByIdClient, error)
	GetCoverBySampleId(ctx context.Context, in *SampleIdRequest, opts ...grpc.CallOption) (SamplesService_GetCoverBySampleIdClient, error)
	DeleteCover(ctx context.Context, in *CoverIdRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
	AddSampleUsage(ctx context.Context, in *SampleUsage, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
	DeleteSampleUsage(ctx context.Context, in *DeleteSampleUsageRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
	GetAllSampleUsages(ctx context.Context, in *GetAllSampleUsagesRequest, opts ...grpc.CallOption) (*GetAllSampleUsagesResponse, error)
	EditSampleUsage(ctx context.Context, in *SampleUsage, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
	ToggleSampleLike(ctx context.Context, in *ToggleSampleLikeRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
	GetSampleLikes(ctx context.Context, in *GetLikesRequest, opts ...grpc.CallOption) (*LikesResponse, error)
	AddCommentToSample(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
	GetAllCommentsFromSample(ctx context.Context, in *SampleIdRequest, opts ...grpc.CallOption) (*GetAllCommentsFromSampleResponse, error)
	DeleteComment(ctx context.Context, in *CommentIdRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
	EditComment(ctx context.Context, in *CommentIdRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
	ToggleCommentLike(ctx context.Context, in *ToggleCommentLikeRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
	GetCommentLikes(ctx context.Context, in *GetLikesRequest, opts ...grpc.CallOption) (*LikesResponse, error)
}

type samplesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSamplesServiceClient(cc grpc.ClientConnInterface) SamplesServiceClient {
	return &samplesServiceClient{cc}
}

func (c *samplesServiceClient) UploadSample(ctx context.Context, opts ...grpc.CallOption) (SamplesService_UploadSampleClient, error) {
	stream, err := c.cc.NewStream(ctx, &SamplesService_ServiceDesc.Streams[0], "/samples.SamplesService/UploadSample", opts...)
	if err != nil {
		return nil, err
	}
	x := &samplesServiceUploadSampleClient{stream}
	return x, nil
}

type SamplesService_UploadSampleClient interface {
	Send(*UploadSampleRequest) error
	CloseAndRecv() (*pb.DefaultResponse, error)
	grpc.ClientStream
}

type samplesServiceUploadSampleClient struct {
	grpc.ClientStream
}

func (x *samplesServiceUploadSampleClient) Send(m *UploadSampleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *samplesServiceUploadSampleClient) CloseAndRecv() (*pb.DefaultResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(pb.DefaultResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *samplesServiceClient) GetSampleData(ctx context.Context, in *GetSampleRequest, opts ...grpc.CallOption) (*GetSampleDataResponse, error) {
	out := new(GetSampleDataResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/GetSampleData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) GetSampleFile(ctx context.Context, in *GetSampleRequest, opts ...grpc.CallOption) (SamplesService_GetSampleFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &SamplesService_ServiceDesc.Streams[1], "/samples.SamplesService/GetSampleFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &samplesServiceGetSampleFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SamplesService_GetSampleFileClient interface {
	Recv() (*GetSampleFileResponse, error)
	grpc.ClientStream
}

type samplesServiceGetSampleFileClient struct {
	grpc.ClientStream
}

func (x *samplesServiceGetSampleFileClient) Recv() (*GetSampleFileResponse, error) {
	m := new(GetSampleFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *samplesServiceClient) GetSamples(ctx context.Context, in *GetSamplesRequest, opts ...grpc.CallOption) (*GetSamplesResponse, error) {
	out := new(GetSamplesResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/GetSamples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) GetSamplesByNamePrefix(ctx context.Context, in *GetSamplesByNamePrefixRequest, opts ...grpc.CallOption) (*GetSamplesResponse, error) {
	out := new(GetSamplesResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/GetSamplesByNamePrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) EditSampleInfo(ctx context.Context, in *SampleData, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/EditSampleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) DeleteSample(ctx context.Context, in *SampleIdRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/DeleteSample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) GetUserSamples(ctx context.Context, in *GetUserSamplesRequest, opts ...grpc.CallOption) (*GetSamplesResponse, error) {
	out := new(GetSamplesResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/GetUserSamples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) UploadCover(ctx context.Context, opts ...grpc.CallOption) (SamplesService_UploadCoverClient, error) {
	stream, err := c.cc.NewStream(ctx, &SamplesService_ServiceDesc.Streams[2], "/samples.SamplesService/UploadCover", opts...)
	if err != nil {
		return nil, err
	}
	x := &samplesServiceUploadCoverClient{stream}
	return x, nil
}

type SamplesService_UploadCoverClient interface {
	Send(*CoverStream) error
	CloseAndRecv() (*pb.DefaultResponse, error)
	grpc.ClientStream
}

type samplesServiceUploadCoverClient struct {
	grpc.ClientStream
}

func (x *samplesServiceUploadCoverClient) Send(m *CoverStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *samplesServiceUploadCoverClient) CloseAndRecv() (*pb.DefaultResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(pb.DefaultResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *samplesServiceClient) GetCoverById(ctx context.Context, in *CoverIdRequest, opts ...grpc.CallOption) (SamplesService_GetCoverByIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &SamplesService_ServiceDesc.Streams[3], "/samples.SamplesService/GetCoverById", opts...)
	if err != nil {
		return nil, err
	}
	x := &samplesServiceGetCoverByIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SamplesService_GetCoverByIdClient interface {
	Recv() (*CoverStream, error)
	grpc.ClientStream
}

type samplesServiceGetCoverByIdClient struct {
	grpc.ClientStream
}

func (x *samplesServiceGetCoverByIdClient) Recv() (*CoverStream, error) {
	m := new(CoverStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *samplesServiceClient) GetCoverBySampleId(ctx context.Context, in *SampleIdRequest, opts ...grpc.CallOption) (SamplesService_GetCoverBySampleIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &SamplesService_ServiceDesc.Streams[4], "/samples.SamplesService/GetCoverBySampleId", opts...)
	if err != nil {
		return nil, err
	}
	x := &samplesServiceGetCoverBySampleIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SamplesService_GetCoverBySampleIdClient interface {
	Recv() (*CoverStream, error)
	grpc.ClientStream
}

type samplesServiceGetCoverBySampleIdClient struct {
	grpc.ClientStream
}

func (x *samplesServiceGetCoverBySampleIdClient) Recv() (*CoverStream, error) {
	m := new(CoverStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *samplesServiceClient) DeleteCover(ctx context.Context, in *CoverIdRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/DeleteCover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) AddSampleUsage(ctx context.Context, in *SampleUsage, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/AddSampleUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) DeleteSampleUsage(ctx context.Context, in *DeleteSampleUsageRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/DeleteSampleUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) GetAllSampleUsages(ctx context.Context, in *GetAllSampleUsagesRequest, opts ...grpc.CallOption) (*GetAllSampleUsagesResponse, error) {
	out := new(GetAllSampleUsagesResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/GetAllSampleUsages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) EditSampleUsage(ctx context.Context, in *SampleUsage, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/EditSampleUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) ToggleSampleLike(ctx context.Context, in *ToggleSampleLikeRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/ToggleSampleLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) GetSampleLikes(ctx context.Context, in *GetLikesRequest, opts ...grpc.CallOption) (*LikesResponse, error) {
	out := new(LikesResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/GetSampleLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) AddCommentToSample(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/AddCommentToSample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) GetAllCommentsFromSample(ctx context.Context, in *SampleIdRequest, opts ...grpc.CallOption) (*GetAllCommentsFromSampleResponse, error) {
	out := new(GetAllCommentsFromSampleResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/GetAllCommentsFromSample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) DeleteComment(ctx context.Context, in *CommentIdRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) EditComment(ctx context.Context, in *CommentIdRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/EditComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) ToggleCommentLike(ctx context.Context, in *ToggleCommentLikeRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/ToggleCommentLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplesServiceClient) GetCommentLikes(ctx context.Context, in *GetLikesRequest, opts ...grpc.CallOption) (*LikesResponse, error) {
	out := new(LikesResponse)
	err := c.cc.Invoke(ctx, "/samples.SamplesService/GetCommentLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SamplesServiceServer is the server API for SamplesService service.
// All implementations must embed UnimplementedSamplesServiceServer
// for forward compatibility
type SamplesServiceServer interface {
	UploadSample(SamplesService_UploadSampleServer) error
	GetSampleData(context.Context, *GetSampleRequest) (*GetSampleDataResponse, error)
	GetSampleFile(*GetSampleRequest, SamplesService_GetSampleFileServer) error
	GetSamples(context.Context, *GetSamplesRequest) (*GetSamplesResponse, error)
	GetSamplesByNamePrefix(context.Context, *GetSamplesByNamePrefixRequest) (*GetSamplesResponse, error)
	EditSampleInfo(context.Context, *SampleData) (*pb.DefaultResponse, error)
	DeleteSample(context.Context, *SampleIdRequest) (*pb.DefaultResponse, error)
	GetUserSamples(context.Context, *GetUserSamplesRequest) (*GetSamplesResponse, error)
	UploadCover(SamplesService_UploadCoverServer) error
	GetCoverById(*CoverIdRequest, SamplesService_GetCoverByIdServer) error
	GetCoverBySampleId(*SampleIdRequest, SamplesService_GetCoverBySampleIdServer) error
	DeleteCover(context.Context, *CoverIdRequest) (*pb.DefaultResponse, error)
	AddSampleUsage(context.Context, *SampleUsage) (*pb.DefaultResponse, error)
	DeleteSampleUsage(context.Context, *DeleteSampleUsageRequest) (*pb.DefaultResponse, error)
	GetAllSampleUsages(context.Context, *GetAllSampleUsagesRequest) (*GetAllSampleUsagesResponse, error)
	EditSampleUsage(context.Context, *SampleUsage) (*pb.DefaultResponse, error)
	ToggleSampleLike(context.Context, *ToggleSampleLikeRequest) (*pb.DefaultResponse, error)
	GetSampleLikes(context.Context, *GetLikesRequest) (*LikesResponse, error)
	AddCommentToSample(context.Context, *Comment) (*pb.DefaultResponse, error)
	GetAllCommentsFromSample(context.Context, *SampleIdRequest) (*GetAllCommentsFromSampleResponse, error)
	DeleteComment(context.Context, *CommentIdRequest) (*pb.DefaultResponse, error)
	EditComment(context.Context, *CommentIdRequest) (*pb.DefaultResponse, error)
	ToggleCommentLike(context.Context, *ToggleCommentLikeRequest) (*pb.DefaultResponse, error)
	GetCommentLikes(context.Context, *GetLikesRequest) (*LikesResponse, error)
	mustEmbedUnimplementedSamplesServiceServer()
}

// UnimplementedSamplesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSamplesServiceServer struct {
}

func (UnimplementedSamplesServiceServer) UploadSample(SamplesService_UploadSampleServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadSample not implemented")
}
func (UnimplementedSamplesServiceServer) GetSampleData(context.Context, *GetSampleRequest) (*GetSampleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleData not implemented")
}
func (UnimplementedSamplesServiceServer) GetSampleFile(*GetSampleRequest, SamplesService_GetSampleFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSampleFile not implemented")
}
func (UnimplementedSamplesServiceServer) GetSamples(context.Context, *GetSamplesRequest) (*GetSamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSamples not implemented")
}
func (UnimplementedSamplesServiceServer) GetSamplesByNamePrefix(context.Context, *GetSamplesByNamePrefixRequest) (*GetSamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSamplesByNamePrefix not implemented")
}
func (UnimplementedSamplesServiceServer) EditSampleInfo(context.Context, *SampleData) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditSampleInfo not implemented")
}
func (UnimplementedSamplesServiceServer) DeleteSample(context.Context, *SampleIdRequest) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSample not implemented")
}
func (UnimplementedSamplesServiceServer) GetUserSamples(context.Context, *GetUserSamplesRequest) (*GetSamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSamples not implemented")
}
func (UnimplementedSamplesServiceServer) UploadCover(SamplesService_UploadCoverServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadCover not implemented")
}
func (UnimplementedSamplesServiceServer) GetCoverById(*CoverIdRequest, SamplesService_GetCoverByIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCoverById not implemented")
}
func (UnimplementedSamplesServiceServer) GetCoverBySampleId(*SampleIdRequest, SamplesService_GetCoverBySampleIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCoverBySampleId not implemented")
}
func (UnimplementedSamplesServiceServer) DeleteCover(context.Context, *CoverIdRequest) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCover not implemented")
}
func (UnimplementedSamplesServiceServer) AddSampleUsage(context.Context, *SampleUsage) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSampleUsage not implemented")
}
func (UnimplementedSamplesServiceServer) DeleteSampleUsage(context.Context, *DeleteSampleUsageRequest) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSampleUsage not implemented")
}
func (UnimplementedSamplesServiceServer) GetAllSampleUsages(context.Context, *GetAllSampleUsagesRequest) (*GetAllSampleUsagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSampleUsages not implemented")
}
func (UnimplementedSamplesServiceServer) EditSampleUsage(context.Context, *SampleUsage) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditSampleUsage not implemented")
}
func (UnimplementedSamplesServiceServer) ToggleSampleLike(context.Context, *ToggleSampleLikeRequest) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleSampleLike not implemented")
}
func (UnimplementedSamplesServiceServer) GetSampleLikes(context.Context, *GetLikesRequest) (*LikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleLikes not implemented")
}
func (UnimplementedSamplesServiceServer) AddCommentToSample(context.Context, *Comment) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommentToSample not implemented")
}
func (UnimplementedSamplesServiceServer) GetAllCommentsFromSample(context.Context, *SampleIdRequest) (*GetAllCommentsFromSampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCommentsFromSample not implemented")
}
func (UnimplementedSamplesServiceServer) DeleteComment(context.Context, *CommentIdRequest) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedSamplesServiceServer) EditComment(context.Context, *CommentIdRequest) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditComment not implemented")
}
func (UnimplementedSamplesServiceServer) ToggleCommentLike(context.Context, *ToggleCommentLikeRequest) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleCommentLike not implemented")
}
func (UnimplementedSamplesServiceServer) GetCommentLikes(context.Context, *GetLikesRequest) (*LikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentLikes not implemented")
}
func (UnimplementedSamplesServiceServer) mustEmbedUnimplementedSamplesServiceServer() {}

// UnsafeSamplesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SamplesServiceServer will
// result in compilation errors.
type UnsafeSamplesServiceServer interface {
	mustEmbedUnimplementedSamplesServiceServer()
}

func RegisterSamplesServiceServer(s grpc.ServiceRegistrar, srv SamplesServiceServer) {
	s.RegisterService(&SamplesService_ServiceDesc, srv)
}

func _SamplesService_UploadSample_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SamplesServiceServer).UploadSample(&samplesServiceUploadSampleServer{stream})
}

type SamplesService_UploadSampleServer interface {
	SendAndClose(*pb.DefaultResponse) error
	Recv() (*UploadSampleRequest, error)
	grpc.ServerStream
}

type samplesServiceUploadSampleServer struct {
	grpc.ServerStream
}

func (x *samplesServiceUploadSampleServer) SendAndClose(m *pb.DefaultResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *samplesServiceUploadSampleServer) Recv() (*UploadSampleRequest, error) {
	m := new(UploadSampleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SamplesService_GetSampleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).GetSampleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/GetSampleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).GetSampleData(ctx, req.(*GetSampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_GetSampleFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSampleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SamplesServiceServer).GetSampleFile(m, &samplesServiceGetSampleFileServer{stream})
}

type SamplesService_GetSampleFileServer interface {
	Send(*GetSampleFileResponse) error
	grpc.ServerStream
}

type samplesServiceGetSampleFileServer struct {
	grpc.ServerStream
}

func (x *samplesServiceGetSampleFileServer) Send(m *GetSampleFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SamplesService_GetSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).GetSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/GetSamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).GetSamples(ctx, req.(*GetSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_GetSamplesByNamePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSamplesByNamePrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).GetSamplesByNamePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/GetSamplesByNamePrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).GetSamplesByNamePrefix(ctx, req.(*GetSamplesByNamePrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_EditSampleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).EditSampleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/EditSampleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).EditSampleInfo(ctx, req.(*SampleData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_DeleteSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).DeleteSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/DeleteSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).DeleteSample(ctx, req.(*SampleIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_GetUserSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).GetUserSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/GetUserSamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).GetUserSamples(ctx, req.(*GetUserSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_UploadCover_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SamplesServiceServer).UploadCover(&samplesServiceUploadCoverServer{stream})
}

type SamplesService_UploadCoverServer interface {
	SendAndClose(*pb.DefaultResponse) error
	Recv() (*CoverStream, error)
	grpc.ServerStream
}

type samplesServiceUploadCoverServer struct {
	grpc.ServerStream
}

func (x *samplesServiceUploadCoverServer) SendAndClose(m *pb.DefaultResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *samplesServiceUploadCoverServer) Recv() (*CoverStream, error) {
	m := new(CoverStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SamplesService_GetCoverById_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CoverIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SamplesServiceServer).GetCoverById(m, &samplesServiceGetCoverByIdServer{stream})
}

type SamplesService_GetCoverByIdServer interface {
	Send(*CoverStream) error
	grpc.ServerStream
}

type samplesServiceGetCoverByIdServer struct {
	grpc.ServerStream
}

func (x *samplesServiceGetCoverByIdServer) Send(m *CoverStream) error {
	return x.ServerStream.SendMsg(m)
}

func _SamplesService_GetCoverBySampleId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SampleIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SamplesServiceServer).GetCoverBySampleId(m, &samplesServiceGetCoverBySampleIdServer{stream})
}

type SamplesService_GetCoverBySampleIdServer interface {
	Send(*CoverStream) error
	grpc.ServerStream
}

type samplesServiceGetCoverBySampleIdServer struct {
	grpc.ServerStream
}

func (x *samplesServiceGetCoverBySampleIdServer) Send(m *CoverStream) error {
	return x.ServerStream.SendMsg(m)
}

func _SamplesService_DeleteCover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoverIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).DeleteCover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/DeleteCover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).DeleteCover(ctx, req.(*CoverIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_AddSampleUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleUsage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).AddSampleUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/AddSampleUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).AddSampleUsage(ctx, req.(*SampleUsage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_DeleteSampleUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSampleUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).DeleteSampleUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/DeleteSampleUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).DeleteSampleUsage(ctx, req.(*DeleteSampleUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_GetAllSampleUsages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSampleUsagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).GetAllSampleUsages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/GetAllSampleUsages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).GetAllSampleUsages(ctx, req.(*GetAllSampleUsagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_EditSampleUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleUsage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).EditSampleUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/EditSampleUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).EditSampleUsage(ctx, req.(*SampleUsage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_ToggleSampleLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleSampleLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).ToggleSampleLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/ToggleSampleLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).ToggleSampleLike(ctx, req.(*ToggleSampleLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_GetSampleLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).GetSampleLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/GetSampleLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).GetSampleLikes(ctx, req.(*GetLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_AddCommentToSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).AddCommentToSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/AddCommentToSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).AddCommentToSample(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_GetAllCommentsFromSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).GetAllCommentsFromSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/GetAllCommentsFromSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).GetAllCommentsFromSample(ctx, req.(*SampleIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).DeleteComment(ctx, req.(*CommentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_EditComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).EditComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/EditComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).EditComment(ctx, req.(*CommentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_ToggleCommentLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleCommentLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).ToggleCommentLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/ToggleCommentLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).ToggleCommentLike(ctx, req.(*ToggleCommentLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplesService_GetCommentLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplesServiceServer).GetCommentLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samples.SamplesService/GetCommentLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplesServiceServer).GetCommentLikes(ctx, req.(*GetLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SamplesService_ServiceDesc is the grpc.ServiceDesc for SamplesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SamplesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "samples.SamplesService",
	HandlerType: (*SamplesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSampleData",
			Handler:    _SamplesService_GetSampleData_Handler,
		},
		{
			MethodName: "GetSamples",
			Handler:    _SamplesService_GetSamples_Handler,
		},
		{
			MethodName: "GetSamplesByNamePrefix",
			Handler:    _SamplesService_GetSamplesByNamePrefix_Handler,
		},
		{
			MethodName: "EditSampleInfo",
			Handler:    _SamplesService_EditSampleInfo_Handler,
		},
		{
			MethodName: "DeleteSample",
			Handler:    _SamplesService_DeleteSample_Handler,
		},
		{
			MethodName: "GetUserSamples",
			Handler:    _SamplesService_GetUserSamples_Handler,
		},
		{
			MethodName: "DeleteCover",
			Handler:    _SamplesService_DeleteCover_Handler,
		},
		{
			MethodName: "AddSampleUsage",
			Handler:    _SamplesService_AddSampleUsage_Handler,
		},
		{
			MethodName: "DeleteSampleUsage",
			Handler:    _SamplesService_DeleteSampleUsage_Handler,
		},
		{
			MethodName: "GetAllSampleUsages",
			Handler:    _SamplesService_GetAllSampleUsages_Handler,
		},
		{
			MethodName: "EditSampleUsage",
			Handler:    _SamplesService_EditSampleUsage_Handler,
		},
		{
			MethodName: "ToggleSampleLike",
			Handler:    _SamplesService_ToggleSampleLike_Handler,
		},
		{
			MethodName: "GetSampleLikes",
			Handler:    _SamplesService_GetSampleLikes_Handler,
		},
		{
			MethodName: "AddCommentToSample",
			Handler:    _SamplesService_AddCommentToSample_Handler,
		},
		{
			MethodName: "GetAllCommentsFromSample",
			Handler:    _SamplesService_GetAllCommentsFromSample_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _SamplesService_DeleteComment_Handler,
		},
		{
			MethodName: "EditComment",
			Handler:    _SamplesService_EditComment_Handler,
		},
		{
			MethodName: "ToggleCommentLike",
			Handler:    _SamplesService_ToggleCommentLike_Handler,
		},
		{
			MethodName: "GetCommentLikes",
			Handler:    _SamplesService_GetCommentLikes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadSample",
			Handler:       _SamplesService_UploadSample_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetSampleFile",
			Handler:       _SamplesService_GetSampleFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadCover",
			Handler:       _SamplesService_UploadCover_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCoverById",
			Handler:       _SamplesService_GetCoverById_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCoverBySampleId",
			Handler:       _SamplesService_GetCoverBySampleId_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/samples/samples.proto",
}
