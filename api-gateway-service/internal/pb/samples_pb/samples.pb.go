// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: api/proto/samples/samples.proto

package samples_pb

import (
	pb "api-gateway-service/internal/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SampleAccessType int32

const (
	SampleAccessType_ALL     SampleAccessType = 0
	SampleAccessType_FRIENDS SampleAccessType = 1
	SampleAccessType_PRIVATE SampleAccessType = 2
)

// Enum value maps for SampleAccessType.
var (
	SampleAccessType_name = map[int32]string{
		0: "ALL",
		1: "FRIENDS",
		2: "PRIVATE",
	}
	SampleAccessType_value = map[string]int32{
		"ALL":     0,
		"FRIENDS": 1,
		"PRIVATE": 2,
	}
)

func (x SampleAccessType) Enum() *SampleAccessType {
	p := new(SampleAccessType)
	*p = x
	return p
}

func (x SampleAccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SampleAccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_samples_samples_proto_enumTypes[0].Descriptor()
}

func (SampleAccessType) Type() protoreflect.EnumType {
	return &file_api_proto_samples_samples_proto_enumTypes[0]
}

func (x SampleAccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SampleAccessType.Descriptor instead.
func (SampleAccessType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{0}
}

type SampleUsageType int32

const (
	SampleUsageType_CREATED      SampleUsageType = 0
	SampleUsageType_DOWNLOADED   SampleUsageType = 1
	SampleUsageType_USED_IN_SONG SampleUsageType = 2
)

// Enum value maps for SampleUsageType.
var (
	SampleUsageType_name = map[int32]string{
		0: "CREATED",
		1: "DOWNLOADED",
		2: "USED_IN_SONG",
	}
	SampleUsageType_value = map[string]int32{
		"CREATED":      0,
		"DOWNLOADED":   1,
		"USED_IN_SONG": 2,
	}
)

func (x SampleUsageType) Enum() *SampleUsageType {
	p := new(SampleUsageType)
	*p = x
	return p
}

func (x SampleUsageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SampleUsageType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_samples_samples_proto_enumTypes[1].Descriptor()
}

func (SampleUsageType) Type() protoreflect.EnumType {
	return &file_api_proto_samples_samples_proto_enumTypes[1]
}

func (x SampleUsageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SampleUsageType.Descriptor instead.
func (SampleUsageType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{1}
}

type SampleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId       string           `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	Name           string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AuthorId       string           `protobuf:"bytes,3,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	AccessType     SampleAccessType `protobuf:"varint,4,opt,name=access_type,json=accessType,proto3,enum=samples.SampleAccessType" json:"access_type,omitempty"`
	PrivateComment string           `protobuf:"bytes,5,opt,name=private_comment,json=privateComment,proto3" json:"private_comment,omitempty"`
	Description    string           `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	CoverId        string           `protobuf:"bytes,7,opt,name=cover_id,json=coverId,proto3" json:"cover_id,omitempty"`
}

func (x *SampleData) Reset() {
	*x = SampleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleData) ProtoMessage() {}

func (x *SampleData) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleData.ProtoReflect.Descriptor instead.
func (*SampleData) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{0}
}

func (x *SampleData) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *SampleData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SampleData) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *SampleData) GetAccessType() SampleAccessType {
	if x != nil {
		return x.AccessType
	}
	return SampleAccessType_ALL
}

func (x *SampleData) GetPrivateComment() string {
	if x != nil {
		return x.PrivateComment
	}
	return ""
}

func (x *SampleData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SampleData) GetCoverId() string {
	if x != nil {
		return x.CoverId
	}
	return ""
}

type SampleUploadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleData *SampleData `protobuf:"bytes,1,opt,name=sample_data,json=sampleData,proto3" json:"sample_data,omitempty"`
	FileType   string      `protobuf:"bytes,2,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
}

func (x *SampleUploadData) Reset() {
	*x = SampleUploadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleUploadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleUploadData) ProtoMessage() {}

func (x *SampleUploadData) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleUploadData.ProtoReflect.Descriptor instead.
func (*SampleUploadData) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{1}
}

func (x *SampleUploadData) GetSampleData() *SampleData {
	if x != nil {
		return x.SampleData
	}
	return nil
}

func (x *SampleUploadData) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

type UploadSampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*UploadSampleRequest_SampleUploadData
	//	*UploadSampleRequest_Content
	Request isUploadSampleRequest_Request `protobuf_oneof:"request"`
}

func (x *UploadSampleRequest) Reset() {
	*x = UploadSampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadSampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSampleRequest) ProtoMessage() {}

func (x *UploadSampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSampleRequest.ProtoReflect.Descriptor instead.
func (*UploadSampleRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{2}
}

func (m *UploadSampleRequest) GetRequest() isUploadSampleRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *UploadSampleRequest) GetSampleUploadData() *SampleUploadData {
	if x, ok := x.GetRequest().(*UploadSampleRequest_SampleUploadData); ok {
		return x.SampleUploadData
	}
	return nil
}

func (x *UploadSampleRequest) GetContent() []byte {
	if x, ok := x.GetRequest().(*UploadSampleRequest_Content); ok {
		return x.Content
	}
	return nil
}

type isUploadSampleRequest_Request interface {
	isUploadSampleRequest_Request()
}

type UploadSampleRequest_SampleUploadData struct {
	SampleUploadData *SampleUploadData `protobuf:"bytes,1,opt,name=sample_upload_data,json=sampleUploadData,proto3,oneof"`
}

type UploadSampleRequest_Content struct {
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof"`
}

func (*UploadSampleRequest_SampleUploadData) isUploadSampleRequest_Request() {}

func (*UploadSampleRequest_Content) isUploadSampleRequest_Request() {}

type GetSampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AuthorId string `protobuf:"bytes,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
}

func (x *GetSampleRequest) Reset() {
	*x = GetSampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSampleRequest) ProtoMessage() {}

func (x *GetSampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSampleRequest.ProtoReflect.Descriptor instead.
func (*GetSampleRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{3}
}

func (x *GetSampleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetSampleRequest) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

type SampleFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*SampleFile_FileType
	//	*SampleFile_Content
	Request isSampleFile_Request `protobuf_oneof:"request"`
}

func (x *SampleFile) Reset() {
	*x = SampleFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleFile) ProtoMessage() {}

func (x *SampleFile) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleFile.ProtoReflect.Descriptor instead.
func (*SampleFile) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{4}
}

func (m *SampleFile) GetRequest() isSampleFile_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *SampleFile) GetFileType() string {
	if x, ok := x.GetRequest().(*SampleFile_FileType); ok {
		return x.FileType
	}
	return ""
}

func (x *SampleFile) GetContent() []byte {
	if x, ok := x.GetRequest().(*SampleFile_Content); ok {
		return x.Content
	}
	return nil
}

type isSampleFile_Request interface {
	isSampleFile_Request()
}

type SampleFile_FileType struct {
	FileType string `protobuf:"bytes,1,opt,name=file_type,json=fileType,proto3,oneof"`
}

type SampleFile_Content struct {
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof"`
}

func (*SampleFile_FileType) isSampleFile_Request() {}

func (*SampleFile_Content) isSampleFile_Request() {}

type GetSamplesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Offset int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetSamplesRequest) Reset() {
	*x = GetSamplesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSamplesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSamplesRequest) ProtoMessage() {}

func (x *GetSamplesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSamplesRequest.ProtoReflect.Descriptor instead.
func (*GetSamplesRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{5}
}

func (x *GetSamplesRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSamplesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetSamplesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetSamplesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int64         `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error   string        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Samples []*SampleData `protobuf:"bytes,3,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *GetSamplesResponse) Reset() {
	*x = GetSamplesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSamplesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSamplesResponse) ProtoMessage() {}

func (x *GetSamplesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSamplesResponse.ProtoReflect.Descriptor instead.
func (*GetSamplesResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{6}
}

func (x *GetSamplesResponse) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetSamplesResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetSamplesResponse) GetSamples() []*SampleData {
	if x != nil {
		return x.Samples
	}
	return nil
}

type GetSamplesByNamePrefixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query  string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetSamplesByNamePrefixRequest) Reset() {
	*x = GetSamplesByNamePrefixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSamplesByNamePrefixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSamplesByNamePrefixRequest) ProtoMessage() {}

func (x *GetSamplesByNamePrefixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSamplesByNamePrefixRequest.ProtoReflect.Descriptor instead.
func (*GetSamplesByNamePrefixRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{7}
}

func (x *GetSamplesByNamePrefixRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetSamplesByNamePrefixRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type SampleIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AuthorId string `protobuf:"bytes,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
}

func (x *SampleIdRequest) Reset() {
	*x = SampleIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleIdRequest) ProtoMessage() {}

func (x *SampleIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleIdRequest.ProtoReflect.Descriptor instead.
func (*SampleIdRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{8}
}

func (x *SampleIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SampleIdRequest) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

type CoverData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId string `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	FileType string `protobuf:"bytes,2,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
}

func (x *CoverData) Reset() {
	*x = CoverData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverData) ProtoMessage() {}

func (x *CoverData) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverData.ProtoReflect.Descriptor instead.
func (*CoverData) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{9}
}

func (x *CoverData) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *CoverData) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

type CoverStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*CoverStream_CoverData
	//	*CoverStream_Content
	Request isCoverStream_Request `protobuf_oneof:"request"`
}

func (x *CoverStream) Reset() {
	*x = CoverStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverStream) ProtoMessage() {}

func (x *CoverStream) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverStream.ProtoReflect.Descriptor instead.
func (*CoverStream) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{10}
}

func (m *CoverStream) GetRequest() isCoverStream_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *CoverStream) GetCoverData() *CoverData {
	if x, ok := x.GetRequest().(*CoverStream_CoverData); ok {
		return x.CoverData
	}
	return nil
}

func (x *CoverStream) GetContent() []byte {
	if x, ok := x.GetRequest().(*CoverStream_Content); ok {
		return x.Content
	}
	return nil
}

type isCoverStream_Request interface {
	isCoverStream_Request()
}

type CoverStream_CoverData struct {
	CoverData *CoverData `protobuf:"bytes,1,opt,name=cover_data,json=coverData,proto3,oneof"`
}

type CoverStream_Content struct {
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof"`
}

func (*CoverStream_CoverData) isCoverStream_Request() {}

func (*CoverStream_Content) isCoverStream_Request() {}

type CoverIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AuthorId string `protobuf:"bytes,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
}

func (x *CoverIdRequest) Reset() {
	*x = CoverIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverIdRequest) ProtoMessage() {}

func (x *CoverIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverIdRequest.ProtoReflect.Descriptor instead.
func (*CoverIdRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{11}
}

func (x *CoverIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoverIdRequest) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

type SampleUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type     SampleUsageType `protobuf:"varint,2,opt,name=type,proto3,enum=samples.SampleUsageType" json:"type,omitempty"`
	UserId   string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SampleId string          `protobuf:"bytes,4,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
}

func (x *SampleUsage) Reset() {
	*x = SampleUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleUsage) ProtoMessage() {}

func (x *SampleUsage) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleUsage.ProtoReflect.Descriptor instead.
func (*SampleUsage) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{12}
}

func (x *SampleUsage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SampleUsage) GetType() SampleUsageType {
	if x != nil {
		return x.Type
	}
	return SampleUsageType_CREATED
}

func (x *SampleUsage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SampleUsage) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

type DeleteSampleUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DeleteSampleUsageRequest) Reset() {
	*x = DeleteSampleUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSampleUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSampleUsageRequest) ProtoMessage() {}

func (x *DeleteSampleUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSampleUsageRequest.ProtoReflect.Descriptor instead.
func (*DeleteSampleUsageRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteSampleUsageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteSampleUsageRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetAllSampleUsagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetAllSampleUsagesRequest) Reset() {
	*x = GetAllSampleUsagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSampleUsagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSampleUsagesRequest) ProtoMessage() {}

func (x *GetAllSampleUsagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSampleUsagesRequest.ProtoReflect.Descriptor instead.
func (*GetAllSampleUsagesRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{14}
}

func (x *GetAllSampleUsagesRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAllSampleUsagesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetAllSampleUsagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int64          `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Usages []*SampleUsage `protobuf:"bytes,3,rep,name=usages,proto3" json:"usages,omitempty"`
}

func (x *GetAllSampleUsagesResponse) Reset() {
	*x = GetAllSampleUsagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSampleUsagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSampleUsagesResponse) ProtoMessage() {}

func (x *GetAllSampleUsagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSampleUsagesResponse.ProtoReflect.Descriptor instead.
func (*GetAllSampleUsagesResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{15}
}

func (x *GetAllSampleUsagesResponse) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetAllSampleUsagesResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetAllSampleUsagesResponse) GetUsages() []*SampleUsage {
	if x != nil {
		return x.Usages
	}
	return nil
}

type Like struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CommentId string `protobuf:"bytes,3,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	SampleId  string `protobuf:"bytes,4,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
}

func (x *Like) Reset() {
	*x = Like{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Like) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Like) ProtoMessage() {}

func (x *Like) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Like.ProtoReflect.Descriptor instead.
func (*Like) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{16}
}

func (x *Like) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Like) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Like) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

func (x *Like) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AuthorId  string `protobuf:"bytes,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	Text      string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	SampleId  string `protobuf:"bytes,4,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	CommentId string `protobuf:"bytes,5,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{17}
}

func (x *Comment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Comment) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *Comment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Comment) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *Comment) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

type ToggleSampleLikeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleId string `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ToggleSampleLikeRequest) Reset() {
	*x = ToggleSampleLikeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleSampleLikeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleSampleLikeRequest) ProtoMessage() {}

func (x *ToggleSampleLikeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleSampleLikeRequest.ProtoReflect.Descriptor instead.
func (*ToggleSampleLikeRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{18}
}

func (x *ToggleSampleLikeRequest) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *ToggleSampleLikeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ToggleCommentLikeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId string `protobuf:"bytes,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ToggleCommentLikeRequest) Reset() {
	*x = ToggleCommentLikeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleCommentLikeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleCommentLikeRequest) ProtoMessage() {}

func (x *ToggleCommentLikeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleCommentLikeRequest.ProtoReflect.Descriptor instead.
func (*ToggleCommentLikeRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{19}
}

func (x *ToggleCommentLikeRequest) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

func (x *ToggleCommentLikeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CommentIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CommentIdRequest) Reset() {
	*x = CommentIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentIdRequest) ProtoMessage() {}

func (x *CommentIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentIdRequest.ProtoReflect.Descriptor instead.
func (*CommentIdRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{20}
}

func (x *CommentIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetLikesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentOrSampleId string `protobuf:"bytes,1,opt,name=comment_or_sample_id,json=commentOrSampleId,proto3" json:"comment_or_sample_id,omitempty"`
}

func (x *GetLikesRequest) Reset() {
	*x = GetLikesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLikesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLikesRequest) ProtoMessage() {}

func (x *GetLikesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLikesRequest.ProtoReflect.Descriptor instead.
func (*GetLikesRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{21}
}

func (x *GetLikesRequest) GetCommentOrSampleId() string {
	if x != nil {
		return x.CommentOrSampleId
	}
	return ""
}

type LikesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int64   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Likes  []*Like `protobuf:"bytes,3,rep,name=likes,proto3" json:"likes,omitempty"`
}

func (x *LikesResponse) Reset() {
	*x = LikesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_samples_samples_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikesResponse) ProtoMessage() {}

func (x *LikesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_samples_samples_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikesResponse.ProtoReflect.Descriptor instead.
func (*LikesResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_samples_samples_proto_rawDescGZIP(), []int{22}
}

func (x *LikesResponse) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *LikesResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *LikesResponse) GetLikes() []*Like {
	if x != nil {
		return x.Likes
	}
	return nil
}

var File_api_proto_samples_samples_proto protoreflect.FileDescriptor

var file_api_proto_samples_samples_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x01, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x65, 0x0a, 0x10, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x49, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x3f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x71, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x09, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x69,
	0x0a, 0x0b, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x33, 0x0a,
	0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x0e, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x0b, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x49, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x78, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x17,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x69, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a,
	0x18, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x22, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6b, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x0d, 0x4c, 0x69, 0x6b,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x2a, 0x35, 0x0a,
	0x10, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x52,
	0x49, 0x45, 0x4e, 0x44, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x10, 0x02, 0x2a, 0x40, 0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f,
	0x53, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x32, 0xb3, 0x0d, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x41, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x47, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x26, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x18,
	0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12,
	0x14, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x18, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x12, 0x41, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x17, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x42, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x2e, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x42, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12,
	0x17, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x2e,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a,
	0x0f, 0x45, 0x64, 0x69, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x50, 0x0a, 0x10, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x20, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x69, 0x6b,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x12, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x10, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x45,
	0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x52, 0x0a, 0x11, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x21, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6b,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x37, 0x5a, 0x35,
	0x61, 0x70, 0x69, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x2f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x62, 0x3b, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_samples_samples_proto_rawDescOnce sync.Once
	file_api_proto_samples_samples_proto_rawDescData = file_api_proto_samples_samples_proto_rawDesc
)

func file_api_proto_samples_samples_proto_rawDescGZIP() []byte {
	file_api_proto_samples_samples_proto_rawDescOnce.Do(func() {
		file_api_proto_samples_samples_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_samples_samples_proto_rawDescData)
	})
	return file_api_proto_samples_samples_proto_rawDescData
}

var file_api_proto_samples_samples_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_proto_samples_samples_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_api_proto_samples_samples_proto_goTypes = []interface{}{
	(SampleAccessType)(0),                 // 0: samples.SampleAccessType
	(SampleUsageType)(0),                  // 1: samples.SampleUsageType
	(*SampleData)(nil),                    // 2: samples.SampleData
	(*SampleUploadData)(nil),              // 3: samples.SampleUploadData
	(*UploadSampleRequest)(nil),           // 4: samples.UploadSampleRequest
	(*GetSampleRequest)(nil),              // 5: samples.GetSampleRequest
	(*SampleFile)(nil),                    // 6: samples.SampleFile
	(*GetSamplesRequest)(nil),             // 7: samples.GetSamplesRequest
	(*GetSamplesResponse)(nil),            // 8: samples.GetSamplesResponse
	(*GetSamplesByNamePrefixRequest)(nil), // 9: samples.GetSamplesByNamePrefixRequest
	(*SampleIdRequest)(nil),               // 10: samples.SampleIdRequest
	(*CoverData)(nil),                     // 11: samples.CoverData
	(*CoverStream)(nil),                   // 12: samples.CoverStream
	(*CoverIdRequest)(nil),                // 13: samples.CoverIdRequest
	(*SampleUsage)(nil),                   // 14: samples.SampleUsage
	(*DeleteSampleUsageRequest)(nil),      // 15: samples.DeleteSampleUsageRequest
	(*GetAllSampleUsagesRequest)(nil),     // 16: samples.GetAllSampleUsagesRequest
	(*GetAllSampleUsagesResponse)(nil),    // 17: samples.GetAllSampleUsagesResponse
	(*Like)(nil),                          // 18: samples.Like
	(*Comment)(nil),                       // 19: samples.Comment
	(*ToggleSampleLikeRequest)(nil),       // 20: samples.ToggleSampleLikeRequest
	(*ToggleCommentLikeRequest)(nil),      // 21: samples.ToggleCommentLikeRequest
	(*CommentIdRequest)(nil),              // 22: samples.CommentIdRequest
	(*GetLikesRequest)(nil),               // 23: samples.GetLikesRequest
	(*LikesResponse)(nil),                 // 24: samples.LikesResponse
	(*pb.DefaultResponse)(nil),            // 25: default.DefaultResponse
}
var file_api_proto_samples_samples_proto_depIdxs = []int32{
	0,  // 0: samples.SampleData.access_type:type_name -> samples.SampleAccessType
	2,  // 1: samples.SampleUploadData.sample_data:type_name -> samples.SampleData
	3,  // 2: samples.UploadSampleRequest.sample_upload_data:type_name -> samples.SampleUploadData
	2,  // 3: samples.GetSamplesResponse.samples:type_name -> samples.SampleData
	11, // 4: samples.CoverStream.cover_data:type_name -> samples.CoverData
	1,  // 5: samples.SampleUsage.type:type_name -> samples.SampleUsageType
	14, // 6: samples.GetAllSampleUsagesResponse.usages:type_name -> samples.SampleUsage
	18, // 7: samples.LikesResponse.likes:type_name -> samples.Like
	4,  // 8: samples.SamplesService.UploadSample:input_type -> samples.UploadSampleRequest
	5,  // 9: samples.SamplesService.GetSampleData:input_type -> samples.GetSampleRequest
	5,  // 10: samples.SamplesService.GetSampleFile:input_type -> samples.GetSampleRequest
	7,  // 11: samples.SamplesService.GetSamples:input_type -> samples.GetSamplesRequest
	9,  // 12: samples.SamplesService.GetSamplesByNamePrefix:input_type -> samples.GetSamplesByNamePrefixRequest
	2,  // 13: samples.SamplesService.EditSampleInfo:input_type -> samples.SampleData
	10, // 14: samples.SamplesService.DeleteSample:input_type -> samples.SampleIdRequest
	12, // 15: samples.SamplesService.UploadCover:input_type -> samples.CoverStream
	13, // 16: samples.SamplesService.GetCoverById:input_type -> samples.CoverIdRequest
	10, // 17: samples.SamplesService.GetCoverBySampleId:input_type -> samples.SampleIdRequest
	13, // 18: samples.SamplesService.DeleteCover:input_type -> samples.CoverIdRequest
	14, // 19: samples.SamplesService.AddSampleUsage:input_type -> samples.SampleUsage
	15, // 20: samples.SamplesService.DeleteSampleUsage:input_type -> samples.DeleteSampleUsageRequest
	16, // 21: samples.SamplesService.GetAllSampleUsages:input_type -> samples.GetAllSampleUsagesRequest
	14, // 22: samples.SamplesService.EditSampleUsage:input_type -> samples.SampleUsage
	20, // 23: samples.SamplesService.ToggleSampleLike:input_type -> samples.ToggleSampleLikeRequest
	23, // 24: samples.SamplesService.GetSampleLikes:input_type -> samples.GetLikesRequest
	19, // 25: samples.SamplesService.AddCommentToSample:input_type -> samples.Comment
	19, // 26: samples.SamplesService.AddCommentToComment:input_type -> samples.Comment
	22, // 27: samples.SamplesService.DeleteComment:input_type -> samples.CommentIdRequest
	22, // 28: samples.SamplesService.EditComment:input_type -> samples.CommentIdRequest
	21, // 29: samples.SamplesService.ToggleCommentLike:input_type -> samples.ToggleCommentLikeRequest
	23, // 30: samples.SamplesService.GetCommentLikes:input_type -> samples.GetLikesRequest
	25, // 31: samples.SamplesService.UploadSample:output_type -> default.DefaultResponse
	2,  // 32: samples.SamplesService.GetSampleData:output_type -> samples.SampleData
	6,  // 33: samples.SamplesService.GetSampleFile:output_type -> samples.SampleFile
	8,  // 34: samples.SamplesService.GetSamples:output_type -> samples.GetSamplesResponse
	8,  // 35: samples.SamplesService.GetSamplesByNamePrefix:output_type -> samples.GetSamplesResponse
	25, // 36: samples.SamplesService.EditSampleInfo:output_type -> default.DefaultResponse
	25, // 37: samples.SamplesService.DeleteSample:output_type -> default.DefaultResponse
	25, // 38: samples.SamplesService.UploadCover:output_type -> default.DefaultResponse
	12, // 39: samples.SamplesService.GetCoverById:output_type -> samples.CoverStream
	12, // 40: samples.SamplesService.GetCoverBySampleId:output_type -> samples.CoverStream
	25, // 41: samples.SamplesService.DeleteCover:output_type -> default.DefaultResponse
	25, // 42: samples.SamplesService.AddSampleUsage:output_type -> default.DefaultResponse
	25, // 43: samples.SamplesService.DeleteSampleUsage:output_type -> default.DefaultResponse
	17, // 44: samples.SamplesService.GetAllSampleUsages:output_type -> samples.GetAllSampleUsagesResponse
	25, // 45: samples.SamplesService.EditSampleUsage:output_type -> default.DefaultResponse
	25, // 46: samples.SamplesService.ToggleSampleLike:output_type -> default.DefaultResponse
	24, // 47: samples.SamplesService.GetSampleLikes:output_type -> samples.LikesResponse
	25, // 48: samples.SamplesService.AddCommentToSample:output_type -> default.DefaultResponse
	25, // 49: samples.SamplesService.AddCommentToComment:output_type -> default.DefaultResponse
	25, // 50: samples.SamplesService.DeleteComment:output_type -> default.DefaultResponse
	25, // 51: samples.SamplesService.EditComment:output_type -> default.DefaultResponse
	25, // 52: samples.SamplesService.ToggleCommentLike:output_type -> default.DefaultResponse
	24, // 53: samples.SamplesService.GetCommentLikes:output_type -> samples.LikesResponse
	31, // [31:54] is the sub-list for method output_type
	8,  // [8:31] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_api_proto_samples_samples_proto_init() }
func file_api_proto_samples_samples_proto_init() {
	if File_api_proto_samples_samples_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_samples_samples_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleUploadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadSampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSamplesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSamplesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSamplesByNamePrefixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSampleUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSampleUsagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSampleUsagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Like); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleSampleLikeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleCommentLikeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLikesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_samples_samples_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_proto_samples_samples_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*UploadSampleRequest_SampleUploadData)(nil),
		(*UploadSampleRequest_Content)(nil),
	}
	file_api_proto_samples_samples_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*SampleFile_FileType)(nil),
		(*SampleFile_Content)(nil),
	}
	file_api_proto_samples_samples_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*CoverStream_CoverData)(nil),
		(*CoverStream_Content)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_samples_samples_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_samples_samples_proto_goTypes,
		DependencyIndexes: file_api_proto_samples_samples_proto_depIdxs,
		EnumInfos:         file_api_proto_samples_samples_proto_enumTypes,
		MessageInfos:      file_api_proto_samples_samples_proto_msgTypes,
	}.Build()
	File_api_proto_samples_samples_proto = out.File
	file_api_proto_samples_samples_proto_rawDesc = nil
	file_api_proto_samples_samples_proto_goTypes = nil
	file_api_proto_samples_samples_proto_depIdxs = nil
}
