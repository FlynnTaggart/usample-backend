// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api/proto/users/users.proto

package users_pb

import (
	pb "api-gateway-service/internal/pb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*UsersResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUsersByNicknamePrefix(ctx context.Context, in *GetUsersByNicknamePrefixRequest, opts ...grpc.CallOption) (*UsersResponse, error)
	GetUserByNickname(ctx context.Context, in *GetUserByNicknameRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {}
	UpdateUserInfo(ctx context.Context, in *User, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
	AddUserLink(ctx context.Context, in *UserLink, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
	GetUserLinks(ctx context.Context, in *GetUserLinksRequest, opts ...grpc.CallOption) (*UserLinksResponse, error)
	DeleteUserLink(ctx context.Context, in *DeleteUserLinkRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
	// rpc GetCurrentUserFriends(GetCurrentUserFriendsRequest) returns (GetCurrentUserFriendsResponse) {}
	GetUserFriends(ctx context.Context, in *GetUserFriendsRequest, opts ...grpc.CallOption) (*GetUserFriendsResponse, error)
	GetUserSentFriends(ctx context.Context, in *GetUserFriendsRequest, opts ...grpc.CallOption) (*GetUserFriendsResponse, error)
	GetUserRecievedFriends(ctx context.Context, in *GetUserFriendsRequest, opts ...grpc.CallOption) (*GetUserFriendsResponse, error)
	SendFriend(ctx context.Context, in *SendFriendRequest, opts ...grpc.CallOption) (*SendFriendResponse, error)
	AcceptFriend(ctx context.Context, in *AcceptDeclineFriendRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
	DeclineFriend(ctx context.Context, in *AcceptDeclineFriendRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
	Unfriend(ctx context.Context, in *UnfriendRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*UsersResponse, error) {
	out := new(UsersResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUsersByNicknamePrefix(ctx context.Context, in *GetUsersByNicknamePrefixRequest, opts ...grpc.CallOption) (*UsersResponse, error) {
	out := new(UsersResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/GetUsersByNicknamePrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserByNickname(ctx context.Context, in *GetUserByNicknameRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/GetUserByNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateUserInfo(ctx context.Context, in *User, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/UpdateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) AddUserLink(ctx context.Context, in *UserLink, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/AddUserLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserLinks(ctx context.Context, in *GetUserLinksRequest, opts ...grpc.CallOption) (*UserLinksResponse, error) {
	out := new(UserLinksResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/GetUserLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteUserLink(ctx context.Context, in *DeleteUserLinkRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/DeleteUserLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserFriends(ctx context.Context, in *GetUserFriendsRequest, opts ...grpc.CallOption) (*GetUserFriendsResponse, error) {
	out := new(GetUserFriendsResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/GetUserFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserSentFriends(ctx context.Context, in *GetUserFriendsRequest, opts ...grpc.CallOption) (*GetUserFriendsResponse, error) {
	out := new(GetUserFriendsResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/GetUserSentFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserRecievedFriends(ctx context.Context, in *GetUserFriendsRequest, opts ...grpc.CallOption) (*GetUserFriendsResponse, error) {
	out := new(GetUserFriendsResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/GetUserRecievedFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SendFriend(ctx context.Context, in *SendFriendRequest, opts ...grpc.CallOption) (*SendFriendResponse, error) {
	out := new(SendFriendResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/SendFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) AcceptFriend(ctx context.Context, in *AcceptDeclineFriendRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/AcceptFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeclineFriend(ctx context.Context, in *AcceptDeclineFriendRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/DeclineFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Unfriend(ctx context.Context, in *UnfriendRequest, opts ...grpc.CallOption) (*pb.DefaultResponse, error) {
	out := new(pb.DefaultResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/Unfriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	CreateUser(context.Context, *User) (*pb.DefaultResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*UsersResponse, error)
	GetUser(context.Context, *GetUserRequest) (*UserResponse, error)
	GetUsersByNicknamePrefix(context.Context, *GetUsersByNicknamePrefixRequest) (*UsersResponse, error)
	GetUserByNickname(context.Context, *GetUserByNicknameRequest) (*UserResponse, error)
	// rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {}
	UpdateUserInfo(context.Context, *User) (*pb.DefaultResponse, error)
	AddUserLink(context.Context, *UserLink) (*pb.DefaultResponse, error)
	GetUserLinks(context.Context, *GetUserLinksRequest) (*UserLinksResponse, error)
	DeleteUserLink(context.Context, *DeleteUserLinkRequest) (*pb.DefaultResponse, error)
	// rpc GetCurrentUserFriends(GetCurrentUserFriendsRequest) returns (GetCurrentUserFriendsResponse) {}
	GetUserFriends(context.Context, *GetUserFriendsRequest) (*GetUserFriendsResponse, error)
	GetUserSentFriends(context.Context, *GetUserFriendsRequest) (*GetUserFriendsResponse, error)
	GetUserRecievedFriends(context.Context, *GetUserFriendsRequest) (*GetUserFriendsResponse, error)
	SendFriend(context.Context, *SendFriendRequest) (*SendFriendResponse, error)
	AcceptFriend(context.Context, *AcceptDeclineFriendRequest) (*pb.DefaultResponse, error)
	DeclineFriend(context.Context, *AcceptDeclineFriendRequest) (*pb.DefaultResponse, error)
	Unfriend(context.Context, *UnfriendRequest) (*pb.DefaultResponse, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) CreateUser(context.Context, *User) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersServiceServer) GetUsers(context.Context, *GetUsersRequest) (*UsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUsersServiceServer) GetUser(context.Context, *GetUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUsersServiceServer) GetUsersByNicknamePrefix(context.Context, *GetUsersByNicknamePrefixRequest) (*UsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByNicknamePrefix not implemented")
}
func (UnimplementedUsersServiceServer) GetUserByNickname(context.Context, *GetUserByNicknameRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByNickname not implemented")
}
func (UnimplementedUsersServiceServer) UpdateUserInfo(context.Context, *User) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUsersServiceServer) AddUserLink(context.Context, *UserLink) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserLink not implemented")
}
func (UnimplementedUsersServiceServer) GetUserLinks(context.Context, *GetUserLinksRequest) (*UserLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLinks not implemented")
}
func (UnimplementedUsersServiceServer) DeleteUserLink(context.Context, *DeleteUserLinkRequest) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserLink not implemented")
}
func (UnimplementedUsersServiceServer) GetUserFriends(context.Context, *GetUserFriendsRequest) (*GetUserFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFriends not implemented")
}
func (UnimplementedUsersServiceServer) GetUserSentFriends(context.Context, *GetUserFriendsRequest) (*GetUserFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSentFriends not implemented")
}
func (UnimplementedUsersServiceServer) GetUserRecievedFriends(context.Context, *GetUserFriendsRequest) (*GetUserFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRecievedFriends not implemented")
}
func (UnimplementedUsersServiceServer) SendFriend(context.Context, *SendFriendRequest) (*SendFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFriend not implemented")
}
func (UnimplementedUsersServiceServer) AcceptFriend(context.Context, *AcceptDeclineFriendRequest) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptFriend not implemented")
}
func (UnimplementedUsersServiceServer) DeclineFriend(context.Context, *AcceptDeclineFriendRequest) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineFriend not implemented")
}
func (UnimplementedUsersServiceServer) Unfriend(context.Context, *UnfriendRequest) (*pb.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfriend not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUsersByNicknamePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByNicknamePrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUsersByNicknamePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/GetUsersByNicknamePrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUsersByNicknamePrefix(ctx, req.(*GetUsersByNicknamePrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserByNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserByNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/GetUserByNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserByNickname(ctx, req.(*GetUserByNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateUserInfo(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_AddUserLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).AddUserLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/AddUserLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).AddUserLink(ctx, req.(*UserLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/GetUserLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserLinks(ctx, req.(*GetUserLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteUserLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteUserLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/DeleteUserLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteUserLink(ctx, req.(*DeleteUserLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/GetUserFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserFriends(ctx, req.(*GetUserFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserSentFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserSentFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/GetUserSentFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserSentFriends(ctx, req.(*GetUserFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserRecievedFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserRecievedFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/GetUserRecievedFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserRecievedFriends(ctx, req.(*GetUserFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_SendFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SendFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/SendFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SendFriend(ctx, req.(*SendFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_AcceptFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptDeclineFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).AcceptFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/AcceptFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).AcceptFriend(ctx, req.(*AcceptDeclineFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeclineFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptDeclineFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeclineFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/DeclineFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeclineFriend(ctx, req.(*AcceptDeclineFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Unfriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Unfriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/Unfriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Unfriend(ctx, req.(*UnfriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UsersService_CreateUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _UsersService_GetUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UsersService_GetUser_Handler,
		},
		{
			MethodName: "GetUsersByNicknamePrefix",
			Handler:    _UsersService_GetUsersByNicknamePrefix_Handler,
		},
		{
			MethodName: "GetUserByNickname",
			Handler:    _UsersService_GetUserByNickname_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _UsersService_UpdateUserInfo_Handler,
		},
		{
			MethodName: "AddUserLink",
			Handler:    _UsersService_AddUserLink_Handler,
		},
		{
			MethodName: "GetUserLinks",
			Handler:    _UsersService_GetUserLinks_Handler,
		},
		{
			MethodName: "DeleteUserLink",
			Handler:    _UsersService_DeleteUserLink_Handler,
		},
		{
			MethodName: "GetUserFriends",
			Handler:    _UsersService_GetUserFriends_Handler,
		},
		{
			MethodName: "GetUserSentFriends",
			Handler:    _UsersService_GetUserSentFriends_Handler,
		},
		{
			MethodName: "GetUserRecievedFriends",
			Handler:    _UsersService_GetUserRecievedFriends_Handler,
		},
		{
			MethodName: "SendFriend",
			Handler:    _UsersService_SendFriend_Handler,
		},
		{
			MethodName: "AcceptFriend",
			Handler:    _UsersService_AcceptFriend_Handler,
		},
		{
			MethodName: "DeclineFriend",
			Handler:    _UsersService_DeclineFriend_Handler,
		},
		{
			MethodName: "Unfriend",
			Handler:    _UsersService_Unfriend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/users/users.proto",
}
